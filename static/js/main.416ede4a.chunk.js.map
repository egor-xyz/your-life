{"version":3,"sources":["components/Header/Header.tsx","components/LifeGrid/LifeGrid.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Header/Header.module.scss","components/LifeGrid/LifeGrid.module.scss"],"names":["Header","onChange","defYears","degAge","useState","age","setAge","years","setYears","className","styles","root","input","type","value","e","target","debounce","setData","LifeGrid","cells","Array","map","_","index","active","current","icon","color","length","faSkullCrossbones","faCoffee","key","cell","size","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oTAUaA,EAAoB,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OAAY,EAC3CC,mBAASD,GADkC,mBAC1DE,EAD0D,KACrDC,EADqD,OAEvCF,mBAASF,GAF8B,mBAE1DK,EAF0D,KAEnDC,EAFmD,KAGjE,OACE,yBAAKC,UAAWC,IAAOC,MACrB,0BAAMF,UAAWC,IAAOE,OACtB,sCACA,2BACEC,KAAK,SACLC,MAAOT,EACPJ,SAAU,SAAAc,GACRT,GAAQS,EAAEC,OAAOF,OACjBb,GAAUc,EAAEC,OAAOF,MAAOP,OAKhC,0BAAME,UAAWC,IAAOE,OACtB,wCACA,2BACEC,KAAK,SACLC,MAAOP,EACPN,SAAU,SAAAc,GACRP,GAAUO,EAAEC,OAAOF,OACnBb,EAASI,GAAMU,EAAEC,OAAOF,a,gBCjB9Bb,EAAWgB,KAAS,SAACC,EAAcb,EAAaE,GACpDW,EAAQ,CAACb,MAAKE,YACb,KAEUY,EAAe,WAAO,IAAD,EACAf,mBAAS,CAACC,IAdhC,GAc0CE,MAbxC,KAYoB,0BACxBF,EADwB,EACxBA,IAAKE,EADmB,EACnBA,MAAQW,EADW,KAE1BE,EAAgB,YAAIC,MAbN,GAaYd,IAAwBe,KAAI,SAACC,EAAGC,GAC9D,MAAO,CACLC,OAAQD,EAAQ,EAfA,GAeInB,EACpBqB,QAAUF,EAAQ,IAhBF,GAgBSnB,MAG7B,OACE,yBAAKI,UAAWC,IAAOC,MACrB,kBAAC,EAAD,CACER,OAAQE,EACRH,SAAUK,EACVN,SAAU,SAACI,EAAKE,GAAN,OAAgBN,EAASiB,EAASb,EAAKE,MAGnD,yBAAKE,UAAWC,IAAOU,OACpBA,EAAME,KAAI,WAAsBE,GAAU,EAA7BE,QAA8B,IACtCC,EAAMC,EADWH,EAAoB,EAApBA,OAErB,QAAQ,GACN,KAAKD,IAAUJ,EAAMS,OAAS,EAC5BF,EAAOG,IACPF,EAAQ,MACR,MACF,KAAKH,EACHE,EAAOI,IACPH,EAAQ,OACR,MACF,QACED,EAAOI,IACPH,EAAQ,QAEZ,OACE,kBAAC,IAAD,CACEI,IAAKR,EACLf,UAAWC,IAAOuB,KAClBN,KAAMA,EACNC,MAAOA,EACPM,KAAMV,IAAUJ,EAAMS,OAAS,EAAI,KAAO,aC/CzCM,MARf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,QCKc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEhJ5BC,EAAOC,QAAU,CAAC,KAAO,qBAAqB,MAAQ,wB,kBCAtDD,EAAOC,QAAU,CAAC,KAAO,uBAAuB,MAAQ,wBAAwB,KAAO,uBAAuB,aAAe,+BAA+B,cAAgB,mC","file":"static/js/main.416ede4a.chunk.js","sourcesContent":["import React, { FC, useState } from 'react';\n\nimport styles from './Header.module.scss';\n\ninterface Props {\n  degAge: number;\n  defYears: number;\n  onChange: (age: number, years: number) => void;\n}\n\nexport const Header: FC<Props> = ({onChange, defYears, degAge}) => {\n  const [age, setAge] = useState(degAge);\n  const [years, setYears] = useState(defYears);\n  return (\n    <div className={styles.root}>\n      <span className={styles.input}>\n        <span>age:</span>\n        <input\n          type=\"number\"\n          value={age}\n          onChange={e => {\n            setAge(+e.target.value);\n            onChange(+e.target.value, years);\n          }}\n        />\n      </span>\n\n      <span className={styles.input}>\n        <span>years:</span>\n        <input\n          type=\"number\"\n          value={years}\n          onChange={e => {\n            setYears(+e.target.value);\n            onChange(age, +e.target.value);\n          }}\n        />\n      </span>\n    </div>\n  )\n};","import React, { FC, useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCoffee, faSkullCrossbones } from '@fortawesome/free-solid-svg-icons'\nimport { Header } from 'components/Header';\n\nimport styles from './LifeGrid.module.scss';\n\nconst AGE = 35;\nconst YEARS = 85;\nconst WEEKS_IN_YEAR = 52;\n\ninterface Cell {\n  active: boolean;\n  current: boolean;\n}\n\nconst onChange = debounce((setData: any, age: number, years: number) => {\n  setData({age, years})\n}, 500);\n\nexport const LifeGrid: FC = () => {\n  const [{age, years}, setData] = useState({age: AGE, years: YEARS});\n  const cells: Cell[] = [...Array(years * WEEKS_IN_YEAR)].map((_, index) => {\n    return {\n      active: index + 1 < age * WEEKS_IN_YEAR,\n      current: (index + 1) === age * WEEKS_IN_YEAR,\n    }\n  });\n  return (\n    <div className={styles.root}>\n      <Header\n        degAge={age}\n        defYears={years}\n        onChange={(age, years) => onChange(setData, age, years)}\n      />\n\n      <div className={styles.cells}>\n        {cells.map(({ current, active }, index) => {\n          let icon, color;\n          switch (true) {\n            case index === cells.length - 1:\n              icon = faSkullCrossbones;\n              color = 'red';\n              break;\n            case active:\n              icon = faCoffee;\n              color = '#777';\n              break;\n            default:\n              icon = faCoffee;\n              color = 'white';\n          }\n          return (\n            <FontAwesomeIcon\n              key={index}\n              className={styles.cell}\n              icon={icon}\n              color={color}\n              size={index === cells.length - 1 ? '2x' : 'xs'}\n            />\n          )\n        })}\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport './App.css';\nimport { LifeGrid } from 'components/LifeGrid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LifeGrid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Header_root__jsaeH\",\"input\":\"Header_input__3sc1D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"LifeGrid_root__1H2va\",\"cells\":\"LifeGrid_cells__2eSyy\",\"cell\":\"LifeGrid_cell__3nyxS\",\"cell__active\":\"LifeGrid_cell__active__2Ak9x\",\"cell__current\":\"LifeGrid_cell__current__3xDCE\"};"],"sourceRoot":""}